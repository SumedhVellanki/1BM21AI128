#include <iostream>
#include <vector>
using namespace std;

bool isSafe(int row, int col, vector<int>& placement) {
    for (int prevRow = 0; prevRow < row; ++prevRow) {
        if (placement[prevRow] == col ||
            abs(placement[prevRow] - col) == abs(prevRow - row)) {
            return false;
        }
    }
    return true;
}

void solveNQueens(int n, int row, vector<int>& placement, vector<vector<string>>& solutions) {
    if (row == n) {
        vector<string> solution;
        for (int i = 0; i < n; ++i) {
            string rowStr(n, '.');
            rowStr[placement[i]] = 'Q';
            solution.push_back(rowStr);
        }
        solutions.push_back(solution);
        return;
    }
    
    for (int col = 0; col < n; ++col) {
        if (isSafe(row, col, placement)) {
            placement[row] = col;
            solveNQueens(n, row + 1, placement, solutions);
            placement[row] = -1; 
        }
    }
}

vector<vector<string>> solveNQueens(int n) {
    vector<vector<string>> solutions;
    vector<int> placement(n, -1); 
    solveNQueens(n, 0, placement, solutions);
    return solutions;
}

int main() {
    int n;
    cout << "Enter the value of N: ";
    cin >> n;
    
    vector<vector<string>> solutions = solveNQueens(n);
    
    cout << "Number of solutions: " << solutions.size() << endl;
    
    for (const vector<string>& solution : solutions) {
        for (const string& row : solution) {
            cout << row << endl;
        }
        cout << endl;
    }
    
    return 0;
}
